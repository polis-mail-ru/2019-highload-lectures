# Copyright © 2019 Vadim TSesko
# Supposed to be presented by sent (https://tools.suckless.org/sent/)

Designing and Developing
Highload Systems
by Вадим Цесько

Кто этот парень?

@fig/ftk.png

@fig/yandex.png

@fig/compscicenter.png

@fig/ok.png

@fig/nosql.png

@fig/highload.png

https://en.wikipedia.org/wiki/Non-functional_requirement

На практике
• Всегда диапазон решений
• Профдеформация
• https://en.wikipedia.org/wiki/Cognitive_bias

ID

int?

long?

А в кластере?

Единый генератор
• Монотонно
• Узкое место
• SPoF

Распределение диапазонов
• Примерно монотонно
• Быстрее
• Более отказоустойчиво

https://en.wikipedia.org/wiki/Universally_unique_identifier

Reference

String?

"<version>:<long>"

"base64(Protobuf)"

Public API

• https://en.wikipedia.org/wiki/JSON_Web_Token
• URL signing
• Throttling
• Versioning

x.y.z

https://semver.org

Алгоритмы и структуры
тоже развиваются

https://multiformats.io/

@fig/multiformats.png

Форматы

• Расширяемые
• Самоописываемые

• Protobuf
• http://avro.apache.org/
• https://thrift.apache.org/
• JSON
• version + binary
• ...

message Person {
  required string name = 1;
  required int32 id = 2;
  optional string email = 3;
}

Person john = Person.newBuilder()
    .setId(1234)
    .setName("John Doe")
    .setEmail("jdoe@example.com")
    .build();
output = new FileOutputStream(args[0]);
john.writeTo(output);

{"namespace": "example.avro",
 "type": "record",
 "name": "User",
 "fields": [
     {"name": "name", "type": "string"},
     {"name": "favorite_number",  "type": ["int", "null"]},
     {"name": "favorite_color", "type": ["string", "null"]}
 ]
}

User user = User.newBuilder()
             .setName("Charlie")
             .setFavoriteColor("blue")
             .setFavoriteNumber(null)
             .build();

DatumWriter<User> userDatumWriter = new SpecificDatumWriter<User>(User.class);
DataFileWriter<User> dataFileWriter = new DataFileWriter<User>(userDatumWriter);
dataFileWriter.create(user.getSchema(), new File("users.avro"));
dataFileWriter.append(user);
dataFileWriter.close();

Schema schema = new Schema.Parser().parse(new File("user.avsc"));
GenericRecord user = new GenericData.Record(schema);
user.put("name", "Alyssa");
user.put("favorite_number", 256);

Версионируемый
репозиторий
моделей

Immutability

• Concurrent по построению
• Immutable derivatives
• Caching-friendly

Но!

Computation/space
amplification

https://en.wikipedia.org/wiki/Persistent_data_structure
https://en.wikipedia.org/wiki/Hash_consing
https://en.wikipedia.org/wiki/Content-addressable_storage
https://en.wikipedia.org/wiki/Venti
https://en.wikipedia.org/wiki/InterPlanetary_File_System

@fig/ipfs.png

Microservices

organizations which design systems ...
are constrained to produce designs
which are copies of the communication
structures of these organizations.
— M. Conway

• Понятный замкнутый домен
• 1 команда : N сервисов

Что это даёт?

• Сервис = единица отказа
• Изменения/деплой
• Ресурсы
• Масштабируемость
• Наблюдаемость
• (Независимый стек)

Монолит

• Взаимовлияние
• Ресурсы
• Координация
• Масштабируемость
• Наблюдаемость

Устройство
микросервиса

Синхронная
обработка

• <1K потоков
• <1К запросов "в полёте"

Асинхронная
обработка

• N x cores потоков
• Сколько угодно запросов "в полёте"

@fig/fsm.svg

Пулы потоков
• IO vs CPU-bound
• Освобождаем IO ASAP

Pool per service
• Наблюдаемость
• Изоляция

Как не словить OOM?

• Ограниченные очереди
• LIFO?

Back pressure

@fig/reactive.png

• Paging/chunking and/or limit
• Backward/forward marker

Полнота ответа

• Ссылки на (под)ресурсы
• Мультиплексирование

@fig/grpc.png

@fig/http3.png

Конфигурирование

• Mission-critical
• Fallback to snapshot
• Audit
• Push vs Poll

На практике
• By app
• By host/cluster
• ${other.property}

@fig/typesafe.png

@fig/consul.png

Новые фичи

• Copy-paste + cleanup
• Всегда план отката

Feature toggles
a.k.a.
Рубильники

• Партиции
• Web/Mobile/API/...
• Android/iOS/Chrome/...

Масштабирование

По данным

Разделяй и властвуй!
• Вертикально/функционально
• Горизонтально

По запросам

Горизонтально
• Машины/инстансы
• Autoscaling

Функционально
• По типам клиентов
• Real-time vs Batch
• ...

Балансировка

• DNS (GSLB)
• LVS/custom (HTTP)
• Smart client (RPC)

Отказоустойчивость

• Graceful degradation
• Feature toggles/stubs
• Service DAG
• Start с недоступностью

Отказоустойчивость
(как и бекапы)
не работают без
РЕГУЛЯРНОГО ТЕСТИРОВАНИЯ

Retries

• ConnectionTimeout vs ReadTimeout
• Retry storm
• Поэтому на верхнем уровне
• https://cloud.google.com/storage/docs/exponential-backoff

@fig/backoff.png

@fig/circuit.png

Speculative retry
• Больше ресурсов
• Но стабильное поведение
• Time budget propagation

Очереди

• Асинхронная обработка
• Все задачи в конец
• Обработчики из начала

Что это даёт?
• Отказоустойчивость
• Масштабируемость

Challenges
• Хранение offset
• Идемпотентность
• Партиционирование данных
• Транзакционность в партиции

@fig/kafka.png

Design patterns
• https://en.wikipedia.org/wiki/Event-driven_architecture
• https://martinfowler.com/eaaDev/EventSourcing.html
• https://martinfowler.com/bliki/CQRS.html

Наблюдаемость

Метрики
• Mission-critical
• Нет причин экономить*
• Calls/errors/duration/sizes/...
• (Hdr)Histogram vs avg

• https://prometheus.io
• https://grafana.com
• https://metrics.dropwizard.io

Dimensions
• Кто (src)
• Куда (dst)
• Что (операция)
• Партиция/клиент/платформа
• Параметры операций
• Типы ошибок

@fig/druid.png

@fig/opentracing.png

Health checks

• Mission-critical
• Don't be noisy

• https://metrics.dropwizard.io
• https://www.consul.io

Неочевидное
• External availability
• SSL expiration

Диагностика

(Авто)поиск аномалий
• Сравнение с трендами
• (Авто)корреляции метрик
• Day drill

Логи

• Mission-critical
• Агрегация
• Фильтрация

Эксплуатация

Терминирование SSL
vs
Everything encrypted

Медленные
(мобильные)
клиенты

@fig/http2.png

JVM

• jstack
• jmap
• heap dump

JIT

• Время на прогрев
• Плавный ввод в ротацию
• Включение фич

Linux

@fig/linux_observability_tools.png

@fig/linux_static_tools.png

@fig/linux_benchmarking_tools.png

@fig/linux_tuning_tools.png

@fig/perf-tools.png

Reference

@fig/technopolis.png

@fig/data-intensive.png

@fig/sre.png

@fig/cloud.jpeg

@fig/jmm.png

@fig/jcip.jpg

@fig/brendangregg.png

@fig/concurrency-interest.png

@fig/mechanical-sympathy.png

@fig/jugru.png

@fig/reliability.png

@fig/habr.png

@fig/blogs.png

@fig/help-wanted.png

@fig/intern.png

Спасибо за внимание!

Эта презентация лежит здесь:
https://github.com/polis-mail-ru/2019-highload-lectures

Вадим Цесько
incubos.org/contacts

Bonus

5 баллов за развёрнутый фидбек.
Напишите на incubos@yandex.com, что
• понравилось
• было непонятно
• было бесполезно/надо выкинуть
• стоит (и как) улучшить
• стоит добавить